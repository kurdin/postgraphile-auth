{"version":3,"file":"reset_password.js","sourceRoot":"","sources":["reset_password.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qDAA+B;AAe/B,IAAM,0BAA0B,GAAG,UACjC,OAAgB;IAEhB,IAAM,YAAY,GAAG,OAAmC,CAAC;IACzD,OAAO,CACL,YAAY,CAAC,KAAK,KAAK,SAAS,IAAI,YAAY,CAAC,SAAS,KAAK,SAAS,CACzE,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,IAAI,GAAS,UAAO,OAAO,EAAE,EAAU;QAAR,MAAM,YAAA;;;;;;oBACzC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,EAAE;wBACxC,OAAO,CAAC,IAAI,CAAC,2DAA2D,CAAC,CAAC;wBAC1E,sBAAO;qBACR;oBAEK,YAAY,GAAW,kBAAkB,CAAC,OAAO,CAAC,UAAoB,CAAC,CAAC;oBACxE,SAAS,GAA2B,EAAE,CAAC;oBAC7C,IAAI,OAAO,CAAC,SAAS,EAAE;wBACrB,SAAS,CAAC,SAAS,GAAM,gBAAM,CAAC,SAAS,sCAAiC,YAAc,CAAC;qBAC1F;oBAEK,gBAAgB,GAAqB;wBACzC,OAAO,EAAE;4BACP,IAAI,EAAE,gBAAM,CAAC,gBAAgB;4BAC7B,EAAE,EAAE,OAAO,CAAC,KAAK;4BACjB,OAAO,EAAE,0BAA0B;yBACpC;wBACD,YAAY,EAAE,OAAO,CAAC,SAAS;4BAC7B,CAAC,CAAC,qBAAqB;4BACvB,CAAC,CAAC,6BAA6B;wBACjC,SAAS,WAAA;qBACV,CAAC;oBACF,qBAAM,MAAM,CAAC,YAAY,EAAE,gBAAgB,CAAC,EAAA;;oBAA5C,SAA4C,CAAC;;;;;CAC9C,CAAC;AAEF,kBAAe,IAAI,CAAC","sourcesContent":["import { Task } from \"graphile-worker\";\nimport config from \"../config\";\nimport { SendEmailPayload } from \"./send_email\";\n\n// TODO: spam prevention\n\ninterface SendResetPasswordPayload {\n  email: string;\n  knownUser: boolean;\n  resetToken?: string;\n}\n\nexport interface ResetPasswordVariables {\n  resetLink?: string;\n}\n\nconst isSendResetPasswordPayload = (\n  payload: unknown\n): payload is SendResetPasswordPayload => {\n  const checkPayload = payload as SendResetPasswordPayload;\n  return (\n    checkPayload.email !== undefined && checkPayload.knownUser !== undefined\n  );\n};\n\nconst task: Task = async (payload, { addJob }) => {\n  if (!isSendResetPasswordPayload(payload)) {\n    console.warn(\"Absent email address or reset token: task payload ignored\");\n    return;\n  }\n\n  const encodedToken: string = encodeURIComponent(payload.resetToken as string);\n  const variables: ResetPasswordVariables = {};\n  if (payload.knownUser) {\n    variables.resetLink = `${config.publicUrl}/account/confirmpasswordreset/${encodedToken}`;\n  }\n\n  const sendEmailPayload: SendEmailPayload = {\n    options: {\n      from: config.mailgunFromEmail,\n      to: payload.email,\n      subject: \"Password reset requested\",\n    },\n    templateName: payload.knownUser\n      ? \"reset_password.mjml\"\n      : \"notify_reset_requested.mjml\",\n    variables,\n  };\n  await addJob(\"send_email\", sendEmailPayload);\n};\n\nexport default task;\n"]}