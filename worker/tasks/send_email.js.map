{"version":3,"file":"send_email.js","sourceRoot":"","sources":["send_email.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAAiC;AAEjC,8CAA6B;AAC7B,8CAAwB;AACxB,kCAAkC;AAIlC,cAAM,CAAC,IAAI,EAAE,CAAC;AAYd,IAAM,kBAAkB,GAAG,UAAC,OAAgB,YAC1C,OAAA,OAAC,OAA4B,CAAC,OAAO,0CAAE,EAAE,MAAK,SAAS,CAAA,EAAA,CAAC;AAE1D,IAAM,IAAI,GAAS,UAAO,OAAO;;;;;gBAC/B,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;oBAChC,MAAM,KAAK,CAAC,uBAAuB,CAAC,CAAC;iBACtC;gBAEO,OAAO,GAA8B,OAAO,QAArC,EAAE,YAAY,GAAgB,OAAO,aAAvB,EAAE,SAAS,GAAK,OAAO,UAAZ,CAAa;gBACrD,IAAI,CAAC,YAAY,EAAE;oBACjB,MAAM,KAAK,CAAC,uBAAuB,CAAC,CAAC;iBACtC;gBACK,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;;;;gBAGhD,KAAA,cAAS,CAAA;gBAChC,qBAAM,gBAAU,CAAC,YAAY,EAAE,SAAS,CAAC,EAAA;;gBADrC,KAAmB,kBACvB,SAAyC,EAC1C,EAFO,MAAM,YAAA,EAAE,IAAI,UAAA;gBAIpB,IAAI,MAAM,CAAC,MAAM,EAAE;oBACjB,MAAM,KAAK,CAAC,mCAAmC,CAAC,CAAC;iBAClD;gBAEc,qBAAM,cAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,EAAA;;gBAA7D,MAAM,GAAG,SAAoD;gBACnE,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;;;;gBAEpC,OAAO,CAAC,KAAK,CAAC,kCAAgC,GAAC,CAAC,OAAS,CAAC,CAAC;;;;;KAE9D,CAAC;AAEF,kBAAe,IAAI,CAAC","sourcesContent":["import { renderFile } from \"eta\";\nimport { Task } from \"graphile-worker\";\nimport mjml2html from \"mjml\";\nimport path from \"path\";\nimport { mailer } from \"../email\";\nimport { ConfirmEmailVariables } from \"./confirm_email\";\nimport { ResetPasswordVariables } from \"./reset_password\";\n\nmailer.init();\n\nexport interface SendEmailPayload {\n  options: {\n    from: string;\n    to: string | string[];\n    subject: string;\n  };\n  templateName: string;\n  variables: ConfirmEmailVariables | ResetPasswordVariables;\n}\n\nconst isSendEmailPayload = (payload: unknown): payload is SendEmailPayload =>\n  (payload as SendEmailPayload).options?.to !== undefined;\n\nconst task: Task = async (payload) => {\n  if (!isSendEmailPayload(payload)) {\n    throw Error(\"Not an email payload.\");\n  }\n\n  const { options, templateName, variables } = payload;\n  if (!templateName) {\n    throw Error(\"No template provided.\");\n  }\n  const templatePath = path.join(__dirname, \"..\", \"templates\", templateName);\n\n  try {\n    const { errors, html } = mjml2html(\n      await renderFile(templatePath, variables)\n    );\n\n    if (errors.length) {\n      throw Error(\"Email template failed to compile.\");\n    }\n\n    const result = await mailer.send(options.to, options.subject, html);\n    console.log(\"MAIL RESULT:\", result);\n  } catch (e) {\n    console.error(`Worker failed to send email: ${e.message}`);\n  }\n};\n\nexport default task;\n"]}